\name{FunctionrxLogisticRegression}
\alias{FunctionrxLogisticRegression}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
FunctionrxLogisticRegression(x)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{x}{
%%     ~~Describe \code{x} here~~
  }
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
  function(formula = NULL, data, type = c("binary", "multiClass"),
    l2Weight = 1, l1Weight = 1, optTol = 1e-07, memorySize = 20,
    initWtsScale = 0, maxIterations = 2147483647, showTrainingStats = FALSE,
    sgdInitTol = 0, trainThreads = NULL, denseOptimizer = FALSE,
    normalize = "auto", mlTransforms = NULL, mlTransformVars = NULL,
    rowSelection = NULL, transforms = NULL, transformObjects = NULL,
    transformFunc = NULL, transformVars = NULL, transformPackages = NULL,
    transformEnvir = NULL, blocksPerRead = rxGetOption("blocksPerRead"),
    reportProgress = rxGetOption("reportProgress"), verbose = 1,
    computeContext = rxGetOption("computeContext"), ensemble = ensembleControl(),
    ...) {
    mc <- match.call()
    envir <- as.list(parent.frame())
    enclos <- parent.env(environment())
    if (rxHashEnv[["useEntryPoints"]]) {
        trainCall <- mc
        trainCall[[1]] <- as.name(gsub("^rx", "ep", trainCall[[1]]))
        trainCall$telemetryInfo <- "rxLogisticRegression"
        trainOut <- eval(trainCall, envir = envir, enclos = enclos)
    }
    else {
        callArgs <- names(mc)
        dotArgs <- names(list(...))
        if (ensemble$modelCount == 1) {
            algo <- "LogisticReg"
            cmd <- "Train"
            cmdParams <- names(formals(cmd))
            algoParams <- names(formals(algo))
            lrArgs <- setdiff(c(algoParams, dotArgs), cmdParams)
            trainerCall <- mc[c(1L, match(lrArgs, callArgs, 0L))]
            trainerCall[[1]] <- as.name(algo)
            trainerMamlCode <- eval(trainerCall, envir = envir,
                enclos = enclos)
            usedArgs <- attr(trainerMamlCode, "args")
            trainArgs <- setdiff(c(cmdParams, dotArgs), usedArgs)
            trainCall <- mc[c(1L, match(trainArgs, callArgs,
                0L))]
            trainCall$trainerMamlCode <- trainerMamlCode
            trainCall[[1]] <- as.name(cmd)
            trainCall$telemetryInfo <- "rxLogisticRegression"
            trainOut <- eval(trainCall, envir = envir, enclos = enclos)
        }
        else {
            algo <- "logisticRegression"
            cmd <- "rxEnsemble"
            cmdParams <- names(formals(cmd))
            algoParams <- names(formals(algo))
            lrArgs <- setdiff(c(algoParams, dotArgs), cmdParams)
            trainerCall <- mc[c(1L, match(lrArgs, callArgs, 0L))]
            trainerCall[[1]] <- as.name(algo)
            trainerSpecCode <- eval(trainerCall, envir = envir,
                enclos = enclos)
            usedArgs <- attr(trainerSpecCode, "args")
            trainArgs <- setdiff(c(cmdParams, dotArgs), usedArgs)
            trainCall <- mc[c(1L, match(trainArgs, callArgs,
                0L))]
            trainCall$trainers <- list(trainerSpecCode)
            trainCall <- as.call(c(as.list(trainCall), ensemble))
            trainCall[[1]] <- as.name(cmd)
            trainCall$telemetryInfo <- "rxLogisticRegression"
            trainOut <- eval(trainCall, envir = envir, enclos = enclos)
        }
    }
    trainOut$call <- mc
    trainOut$cachedSummary <- summary.LogisticRegression(trainOut,
        top = NULL)
    trainOut$coefficients <- trainOut$cachedSummary$coefficients
    return(trainOut)
}
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line